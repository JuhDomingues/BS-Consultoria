/**
 * SDR Agent - AI-powered Sales Development Representative
 * Handles initial customer engagement via WhatsApp
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load .env.local from project root
dotenv.config({ path: join(__dirname, '..', '.env.local') });

const OPENAI_API_KEY = process.env.OPENAI_API_KEY || process.env.VITE_OPENAI_API_KEY;
const EVOLUTION_API_URL = process.env.EVOLUTION_API_URL;
const EVOLUTION_API_KEY = process.env.EVOLUTION_API_KEY;
const EVOLUTION_INSTANCE = process.env.EVOLUTION_INSTANCE;
const CALENDLY_API_KEY = process.env.CALENDLY_API_KEY;
const CALENDLY_EVENT_TYPE = process.env.CALENDLY_EVENT_TYPE;
const BASEROW_API_URL = process.env.VITE_BASEROW_API_URL;
const BASEROW_TOKEN = process.env.VITE_BASEROW_TOKEN;
const BASEROW_TABLE_ID = process.env.VITE_BASEROW_TABLE_ID;

// Store conversation context (in production, use Redis or database)
const conversationContext = new Map();

/**
 * Get all available properties from Baserow
 */
async function getAllProperties() {
  try {
    const response = await fetch(
      `${BASEROW_API_URL}/api/database/rows/table/${BASEROW_TABLE_ID}/?user_field_names=true`,
      {
        headers: {
          'Authorization': `Token ${BASEROW_TOKEN}`,
        },
      }
    );

    if (!response.ok) {
      throw new Error(`Baserow API error: ${response.status}`);
    }

    const data = await response.json();
    return data.results || [];
  } catch (error) {
    console.error('Error fetching properties:', error);
    return [];
  }
}

/**
 * Format properties for AI context
 */
function formatPropertiesForAI(properties) {
  const formatted = properties.map(prop => ({
    id: prop.id,
    titulo: prop['Title'] || prop['T√≠tulo'] || prop.title || prop['Nome'] || prop['nome'],
    preco: prop['Price'] || prop['Pre√ßo'] || prop.price || prop['Valor'] || prop['valor'],
    tipo: prop['Type']?.value || prop['Tipo']?.value || prop['Type'] || prop['Tipo'] || prop.type,
    categoria: prop['Category']?.value || prop['Categoria']?.value || prop['Category'] || prop['Categoria'] || prop.category,
    localizacao: prop['location'] || prop['Localiza√ß√£o'] || prop.location,
    cidade: prop['city'] || prop['Cidade'] || prop.city,
    bairro: prop['neighborhood'] || prop['Bairro'] || prop.neighborhood,
    quartos: prop['bedrooms'] || prop['Quartos'] || prop.bedrooms,
    banheiros: prop['bathrooms'] || prop['Banheiros'] || prop.bathrooms,
    area: prop['Area'] || prop['√Årea'] || prop.area,
    descricao: prop['description'] || prop['Descri√ß√£o'] || prop.description,
  }));

  return formatted.filter(prop => prop.titulo);
}

/**
 * System prompt for the SDR AI Agent
 */
function getSystemPrompt(properties) {
  const propertiesText = JSON.stringify(properties, null, 2);

  return `Voc√™ √© a Susi, uma consultora de im√≥veis SDR (Sales Development Representative) especializada em im√≥veis da BS Consultoria de Im√≥veis.

SEU NOME E IDENTIDADE:
- Voc√™ √© a Susi, consultora de im√≥veis
- Sempre se apresente como "Susi" na primeira intera√ß√£o
- Use seu nome com simpatia e profissionalismo

SEU PAPEL:
- Atender clientes de forma profissional, amig√°vel e consultiva
- Entender as necessidades e qualificar leads
- Fornecer informa√ß√µes precisas sobre im√≥veis dispon√≠veis
- Agendar visitas quando apropriado
- N√ÉO fechar vendas - isso √© responsabilidade do corretor humano

INFORMA√á√ïES DA EMPRESA:
- Nome: BS Consultoria de Im√≥veis
- CRECI: 30.756-J
- Telefone: (11) 98159-8027
- Endere√ßo: Rua Abreu Lima, 129, Parque Residencial Scaffidi, Itaquaquecetuba/SP
- Especialidade: Apartamentos e sobrados em Itaquaquecetuba e regi√£o

IM√ìVEIS DISPON√çVEIS:
${propertiesText}

IMPORTANTE - REGRAS OBRIGAT√ìRIAS:
1. NUNCA invente ou crie im√≥veis que n√£o est√£o na lista acima
2. Se n√£o houver im√≥vel que atenda perfeitamente, seja honesto e sugira o mais pr√≥ximo
3. SEMPRE baseie suas respostas nos dados reais dos im√≥veis
4. Se um im√≥vel n√£o estiver dispon√≠vel, informe educadamente
5. QUALIFIQUE PRIMEIRO: N√ÉO envie fotos/detalhes at√© entender bem o que o cliente procura
6. APENAS envie fotos quando o cliente pedir EXPLICITAMENTE (ex: "me manda foto", "mostra o apartamento")
7. Perguntas gen√©ricas sobre im√≥veis = fa√ßa perguntas de qualifica√ß√£o primeiro
8. Cliente pedindo foto/detalhes espec√≠ficos = pode enviar (o sistema far√° isso automaticamente)

ESTRAT√âGIA DE ATENDIMENTO:
üéØ FASE 1 - QUALIFICA√á√ÉO (sempre comece aqui para perguntas gen√©ricas):
- Entenda o perfil do cliente ANTES de recomendar im√≥veis
- Fa√ßa perguntas naturais e conversacionais
- N√ÉO ofere√ßa im√≥veis espec√≠ficos at√© ter pelo menos 3 informa√ß√µes do cliente

üè† FASE 2 - RECOMENDA√á√ÉO (s√≥ ap√≥s qualificar):
- Baseado nas respostas, recomende o melhor im√≥vel
- Seja espec√≠fico sobre POR QU√ä esse im√≥vel √© ideal para o cliente
- Pergunte se quer ver fotos/detalhes

üì∏ FASE 3 - ENVIO DE DETALHES (apenas se cliente pedir):
- Aguarde o cliente pedir explicitamente para ver fotos/detalhes
- Quando pedir, o sistema enviar√° automaticamente

PROCESSO DE QUALIFICA√á√ÉO - Descubra sutilmente (UMA PERGUNTA POR VEZ):
1. Tipo de im√≥vel preferido (apartamento ou sobrado)
2. Composi√ß√£o familiar (quantas pessoas morar√£o)
3. Localiza√ß√£o de trabalho/escola (para avaliar proximidade)
4. N√∫mero de quartos desejado
5. Faixa de pre√ßo pretendida
6. Forma de pagamento (financiamento ou √† vista)
7. Urg√™ncia da compra (imediata, em breve, pesquisando)

AGENDAMENTO DE VISITAS:
- Quando o cliente demonstrar interesse em visitar, ofere√ßa agendar
- Use um tom como: "Que √≥timo! Posso agendar uma visita para voc√™ conhecer o im√≥vel pessoalmente. Qual dia e hor√°rio seria melhor para voc√™?"
- Depois de coletar prefer√™ncia de data/hora, confirme que est√° processando o agendamento

ESTILO DE COMUNICA√á√ÉO - SEJA NATURAL E HUMANO:
- Converse como uma pessoa real, n√£o como um rob√¥ ou IA
- Use linguagem coloquial e natural do dia a dia (ex: "nossa", "olha", "sabe", "tipo")
- Varie suas respostas - nunca responda da mesma forma duas vezes
- SEJA CONCISA - mensagens devem ter no m√°ximo 2-3 linhas
- Use emojis com modera√ß√£o e naturalidade (0-2 por mensagem)
- Demonstre empatia e conex√£o genu√≠na
- Fa√ßa perguntas de forma conversacional, n√£o como formul√°rio
- Use contra√ß√µes naturais (t√°, pra, n√©, c√™)
- Evite linguagem corporativa ou muito formal
- Responda com varia√ß√µes - se algu√©m diz "oi" duas vezes, n√£o responda igual
- Nunca pressione ou seja insistente
- IMPORTANTE: Respostas curtas e diretas - v√° direto ao ponto
- Fa√ßa uma pergunta por vez, n√£o v√°rias de uma vez
- Evite textos longos e explica√ß√µes desnecess√°rias

IMPORTANTE - N√ÉO PARE√áA UM ROB√î:
‚ùå EVITE frases robotizadas tipo: "Como posso ajud√°-lo hoje?", "Ser√° um prazer atend√™-lo", "Fico √† disposi√ß√£o"
‚úÖ USE frases naturais tipo: "E a√≠, t√° procurando apartamento?", "Me conta o que c√™ t√° buscando", "Beleza, vamos achar o ideal pra voc√™"

‚ùå EVITE respostas padronizadas e id√™nticas
‚úÖ VARIE suas respostas - cada conversa √© √∫nica

‚ùå EVITE ser formal demais: "Senhor(a)", "V.Sa.", "Cordialmente"
‚úÖ SEJA amig√°vel: use "voc√™", trate de forma leve mas respeitosa

EXEMPLO DE CONVERSA BOA (Natural, Qualifica√ß√£o antes de oferecer):
Cliente: "Ol√°, quero ver apartamentos"
Voc√™: "Oi! Sou a Susi üòä T√° procurando pra morar ou investir?"

Cliente: "Pra morar"
Voc√™: "Legal! Vai morar quantas pessoas?"

Cliente: "Eu, minha esposa e 2 filhos"
Voc√™: "Ah, fam√≠lia de 4! Precisa de quantos quartos?"

Cliente: "2 ou 3 quartos"
Voc√™: "Massa! Voc√™s trabalham/estudam por qual regi√£o?"

Cliente: "Eu trabalho em Suzano"
Voc√™: "Perfeito! Tenho um apartamento ideal pra voc√™s em Itaqu√°, super perto de Suzano. Quer ver?"

Cliente: "Quero sim"
Voc√™: "Me manda foto dele" [AQUI o cliente pede explicitamente - sistema envia fotos]

EXEMPLO DE CONVERSA RUIM (Oferecendo im√≥vel antes de qualificar - N√ÉO FA√áA):
Cliente: "Oi, quero ver apartamentos"
Voc√™: "Legal! Temos o Residencial Bela Vista com 2 quartos..." [ERRADO - n√£o qualificou primeiro]

EXEMPLO DE CONVERSA RUIM (Robotizada - N√ÉO FA√áA):
Cliente: "Ol√°"
Voc√™: "Ol√°! Como posso ajud√°-lo hoje?" [ERRADO - muito robotizado e formal]

Cliente: "Tem apartamento?"
Voc√™: "Sim, temos diversas op√ß√µes dispon√≠veis em nosso portf√≥lio." [ERRADO - linguagem corporativa artificial]

Se o cliente pedir informa√ß√µes sobre um im√≥vel espec√≠fico que n√£o est√° na lista, responda:
"No momento, n√£o temos esse im√≥vel espec√≠fico dispon√≠vel, mas temos algumas op√ß√µes que podem te interessar! Posso te mostrar?"

Lembre-se: Voc√™ √© um pr√©-filtro inteligente. Qualifique bem o lead e deixe o corretor humano fechar a venda!`;
}

/**
 * Send message to OpenAI and get AI response
 */
async function getAIResponse(userMessage, conversationHistory, properties) {
  try {
    const messages = [
      {
        role: 'system',
        content: getSystemPrompt(properties)
      },
      ...conversationHistory,
      {
        role: 'user',
        content: userMessage
      }
    ];

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        temperature: 0.7,
        max_tokens: 150
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('Error getting AI response:', error);
    return 'Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em instantes ou ligue para (11) 97336-0980.';
  }
}

/**
 * Send WhatsApp message via Evolution API
 */
async function sendWhatsAppMessage(phoneNumber, message) {
  try {
    // Format phone number for WhatsApp (remove @ if present)
    const cleanNumber = phoneNumber.replace('@s.whatsapp.net', '');

    const url = `${EVOLUTION_API_URL}/message/sendText/${EVOLUTION_INSTANCE}`;
    const payload = {
      number: cleanNumber,
      text: message
    };

    console.log('Sending to Evolution API:', {
      url,
      payload,
      headers: { apikey: EVOLUTION_API_KEY ? '***' : 'MISSING' }
    });

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': EVOLUTION_API_KEY
      },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log('Evolution API response:', response.status, responseText);

    if (!response.ok) {
      throw new Error(`Evolution API error: ${response.status} - ${responseText}`);
    }

    return JSON.parse(responseText);
  } catch (error) {
    console.error('Error sending WhatsApp message:', error);
    throw error;
  }
}

/**
 * Send WhatsApp image with caption via Evolution API
 */
async function sendWhatsAppImage(phoneNumber, imageUrl, caption = '') {
  try {
    // Format phone number for WhatsApp (remove @ if present)
    const cleanNumber = phoneNumber.replace('@s.whatsapp.net', '');

    const url = `${EVOLUTION_API_URL}/message/sendMedia/${EVOLUTION_INSTANCE}`;
    const payload = {
      number: cleanNumber,
      mediatype: 'image',
      media: imageUrl,
      caption: caption
    };

    console.log('Sending image to Evolution API:', {
      url,
      payload,
      headers: { apikey: EVOLUTION_API_KEY ? '***' : 'MISSING' }
    });

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': EVOLUTION_API_KEY
      },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log('Evolution API image response:', response.status, responseText);

    if (!response.ok) {
      throw new Error(`Evolution API error: ${response.status} - ${responseText}`);
    }

    return JSON.parse(responseText);
  } catch (error) {
    console.error('Error sending WhatsApp image:', error);
    throw error;
  }
}

/**
 * Check if message indicates interest in scheduling a visit
 */
function detectSchedulingIntent(message) {
  const schedulingKeywords = [
    'agendar',
    'visita',
    'visitar',
    'conhecer pessoalmente',
    'ir ver',
    'hor√°rio',
    'quando posso',
    'disponibilidade'
  ];

  const lowerMessage = message.toLowerCase();
  return schedulingKeywords.some(keyword => lowerMessage.includes(keyword));
}

/**
 * Check if message EXPLICITLY asks for property information/photos
 * Now more strict - only triggers for direct requests
 */
function detectPropertyInfoRequest(message) {
  const explicitKeywords = [
    'me envia',
    'envia',
    'manda',
    'me manda',
    'quero ver foto',
    'me mostra foto',
    'mostra foto',
    'ver foto',
    'ver imagem',
    'fotos do',
    'fotos da',
    'imagens do',
    'imagens da',
    'detalhes do',
    'detalhes da',
    'informa√ß√µes do',
    'informa√ß√µes da',
    'informacao do',
    'informacao da',
    'mais sobre o',
    'mais sobre a',
    'mais sobre esse',
    'mais sobre este',
    'quero saber mais sobre',
    'me fala sobre o',
    'me fala sobre a',
    'ver detalhes',
    'quero ver',
    'gostaria de ver',
    'quero saber mais',
    'gostaria de mais',
    'mais informa√ß√µes',
    'mais informacoes'
  ];

  const lowerMessage = message.toLowerCase();
  return explicitKeywords.some(keyword => lowerMessage.includes(keyword));
}

/**
 * Check if AI response indicates it will send property details
 */
function aiWillSendPropertyDetails(aiResponse) {
  const indicators = [
    'vou enviar',
    'vou te enviar',
    'vou mandar',
    'vou te mandar',
    'vou te passar',
    'j√° envio',
    'j√° te envio',
    'j√° mando',
    'te envio',
    'te mando',
    'envio as fotos',
    'mando as fotos',
    'envio os detalhes',
    'mando os detalhes',
    'um momento',
    'aguarde',
    'segue',
    'seguem',
    'aqui est√°',
    'aqui est√£o'
  ];

  const lowerResponse = aiResponse.toLowerCase();

  // Check if AI explicitly says it will send photos/details
  const willSend = indicators.some(indicator => lowerResponse.includes(indicator));

  // Also check if the response contains emoji that indicates sending (üì∏, üè†, üìç)
  const hasSendingEmoji = /üì∏|üì©|üì§/.test(aiResponse);

  return willSend || hasSendingEmoji;
}

/**
 * Check if customer came from a specific property page (context indicates it)
 */
function isFromSpecificPropertyPage(context, propertyId) {
  // Customer came from website with a specific property
  return (context.history.length <= 2 && propertyId) || context.propertyId;
}

/**
 * Send property details with photos
 */
async function sendPropertyDetails(phoneNumber, property) {
  try {
    // Prepare property details message with correct field names
    const title = property['Title'] || property['T√≠tulo'] || property.title;
    const price = property['Price'] || property['Pre√ßo'] || property.price;
    const area = property['Area'] || property['√Årea'] || property.area;
    const bedrooms = property['bedrooms'] || property['Quartos'] || property.bedrooms;
    const bathrooms = property['bathrooms'] || property['Banheiros'] || property.bathrooms;
    const parking = property['parkingSpaces'] || property['Vagas'] || property.parking || 1;
    const neighborhood = property['neighborhood'] || property['Bairro'] || property.neighborhood;
    const city = property['city'] || property['Cidade'] || property.city;
    const description = property['description'] || property['Descri√ß√£o'] || property.description || '';

    const detailsMessage = `üìç *${title}*

üí∞ *Valor:* ${price}
üìê *√Årea:* ${area}
üõèÔ∏è *Quartos:* ${bedrooms}
üöø *Banheiros:* ${bathrooms}
üöó *Vagas:* ${parking}

üìç *Localiza√ß√£o:*
${neighborhood}, ${city}

${description}

‚úÖ *Programa Minha Casa Minha Vida aceito*
‚úÖ *Financiamento dispon√≠vel*`;

    // Send the details message first
    await sendWhatsAppMessage(phoneNumber, detailsMessage);

    // Get property images
    const imagesField = property['images'] || property['Imagens'] || property.images;

    if (imagesField) {
      let imagePaths = [];

      // Handle different image field formats
      if (Array.isArray(imagesField)) {
        // If it's already an array
        imagePaths = imagesField.map(img => img.url || img);
      } else if (typeof imagesField === 'string') {
        // If it's a string with newlines (Baserow format)
        imagePaths = imagesField
          .split('\n')
          .map(path => path.trim())
          .filter(path => path.length > 0);
      }

      if (imagePaths.length > 0) {
        // Base URL for images (deploy URL or local)
        const BASE_URL = process.env.SITE_BASE_URL || 'https://bs-consultoria.vercel.app';

        // Send up to 3 images
        const imagesToSend = imagePaths.slice(0, 3);

        console.log(`Sending ${imagesToSend.length} images for property: ${title}`);

        for (let i = 0; i < imagesToSend.length; i++) {
          let imageUrl = imagesToSend[i];

          // Convert relative path to absolute URL
          if (imageUrl.startsWith('/')) {
            imageUrl = BASE_URL + imageUrl;
          }

          console.log(`Image ${i + 1} URL:`, imageUrl);

          // Add a small delay between images to avoid rate limiting
          if (i > 0) {
            await new Promise(resolve => setTimeout(resolve, 1500));
          }

          try {
            await sendWhatsAppImage(phoneNumber, imageUrl, i === 0 ? title : '');
            console.log(`Successfully sent image ${i + 1}`);
          } catch (error) {
            console.error(`Failed to send image ${i + 1}:`, error.message);
            // Continue with next image even if one fails
          }
        }
      } else {
        console.log('No images found for property:', title);
      }
    }

    return true;
  } catch (error) {
    console.error('Error sending property details:', error);
    return false;
  }
}

/**
 * Create Calendly scheduling link
 */
async function createCalendlyLink(propertyId, customerName, customerPhone) {
  // For now, return the standard Calendly link
  // You can customize this with Calendly API if you have premium account
  const calendlyLink = `https://calendly.com/bs-consultoria?property=${propertyId}&name=${encodeURIComponent(customerName)}&phone=${customerPhone}`;
  return calendlyLink;
}

/**
 * Process incoming WhatsApp message
 */
async function processMessage(phoneNumber, message, propertyId = null) {
  try {
    // Get or create conversation context
    if (!conversationContext.has(phoneNumber)) {
      conversationContext.set(phoneNumber, {
        history: [],
        propertyId: propertyId,
        customerInfo: {},
        createdAt: new Date()
      });
    }

    const context = conversationContext.get(phoneNumber);

    // Add initial context if this is the first message and came from a property page
    if (context.history.length === 0 && propertyId) {
      const properties = await getAllProperties();
      const property = properties.find(p => p.id === parseInt(propertyId));
      if (property) {
        const contextMessage = `Cliente est√° interessado no im√≥vel: ${property['T√≠tulo'] || property.title} (ID: ${propertyId})`;
        context.history.push({
          role: 'system',
          content: contextMessage
        });
      }
    }

    // Get all properties for AI context
    const allProperties = await getAllProperties();
    const formattedProperties = formatPropertiesForAI(allProperties);

    // Get AI response
    const aiResponse = await getAIResponse(message, context.history, formattedProperties);

    // Update conversation history
    context.history.push({
      role: 'user',
      content: message
    });
    context.history.push({
      role: 'assistant',
      content: aiResponse
    });

    // Keep only last 20 messages to avoid token limits
    if (context.history.length > 20) {
      context.history = context.history.slice(-20);
    }

    // Check if customer is EXPLICITLY asking for property information OR if AI says it will send
    const isRequestingInfo = detectPropertyInfoRequest(message);
    const cameFromPropertyPage = isFromSpecificPropertyPage(context, propertyId);
    const aiWillSend = aiWillSendPropertyDetails(aiResponse);
    let shouldSendPropertyDetails = false;
    let propertyToSend = null;

    console.log(`Is requesting info: ${isRequestingInfo} | From property page: ${cameFromPropertyPage} | AI will send: ${aiWillSend} | Message: "${message}"`);

    // Get only ACTIVE properties
    const activeProperties = allProperties.filter(p => p['Active'] !== false && p['Ativo'] !== false && p.active !== false);
    console.log(`Active properties count: ${activeProperties.length}`);

    // ONLY send property details when:
    // 1. Customer EXPLICITLY requests info (e.g., "me manda foto", "mostra o apartamento")
    // 2. Customer came from a specific property page on the website
    // 3. AI response indicates it will send property details
    const shouldSendDetails = (isRequestingInfo || cameFromPropertyPage || aiWillSend) && activeProperties.length > 0;

    if (shouldSendDetails) {
      // Priority 1: If we have a propertyId in context from previous interaction
      if (context.propertyId) {
        propertyToSend = activeProperties.find(p => p.id === parseInt(context.propertyId));
      }

      // Priority 2: If came from property page with specific ID
      if (!propertyToSend && cameFromPropertyPage && propertyId) {
        propertyToSend = activeProperties.find(p => p.id === parseInt(propertyId));
        if (propertyToSend) {
          context.propertyId = propertyId;
          console.log(`Customer came from property page: ${propertyToSend['Title'] || propertyToSend['T√≠tulo']} (ID: ${propertyId})`);
        }
      }

      // Priority 3: Try to match property name from message or AI response
      if (!propertyToSend && (isRequestingInfo || aiWillSend)) {
        const lowerMessage = message.toLowerCase();
        const lowerAiResponse = aiResponse.toLowerCase();

        propertyToSend = activeProperties.find(p => {
          const title = (p['Title'] || p['T√≠tulo'] || p.title || '').toLowerCase();
          const neighborhood = (p['neighborhood'] || p['Bairro'] || p.bairro || '').toLowerCase();

          // Check if message or AI response contains property title or neighborhood
          const titleWords = title.split(' ').filter(word => word.length > 4);
          const neighborhoodWords = neighborhood.split(' ').filter(word => word.length > 4);

          const titleMatch = titleWords.some(word =>
            lowerMessage.includes(word) || lowerAiResponse.includes(word)
          );
          const neighborhoodMatch = neighborhoodWords.some(word =>
            lowerMessage.includes(word) || lowerAiResponse.includes(word)
          );

          return titleMatch || neighborhoodMatch;
        });
      }

      // Set flags to send property details
      if (propertyToSend) {
        shouldSendPropertyDetails = true;
        context.propertyId = propertyToSend.id;
        console.log(`Will send property: ${propertyToSend['Title'] || propertyToSend['T√≠tulo']} (ID: ${propertyToSend.id})`);
      } else {
        console.log('No property matched to send');
      }
    } else {
      console.log('Customer needs qualification first - not sending property details yet');
    }

    // Check if customer wants to schedule a visit
    let finalResponse = aiResponse;
    if (detectSchedulingIntent(aiResponse) || detectSchedulingIntent(message)) {
      // In the future, integrate with Calendly API here
      // For now, just include a note
      finalResponse += '\n\nüìÖ *Agendamento dispon√≠vel em breve!*';
    }

    return {
      response: finalResponse,
      context: context,
      shouldSendPropertyDetails,
      propertyToSend
    };
  } catch (error) {
    console.error('Error processing message:', error);
    throw error;
  }
}

/**
 * Clean up old conversations (call this periodically)
 */
function cleanupOldConversations() {
  const maxAge = 24 * 60 * 60 * 1000; // 24 hours
  const now = new Date();

  for (const [phoneNumber, context] of conversationContext.entries()) {
    if (now - context.createdAt > maxAge) {
      conversationContext.delete(phoneNumber);
    }
  }
}

// Clean up every hour
setInterval(cleanupOldConversations, 60 * 60 * 1000);

/**
 * Get all active conversations
 */
function getAllConversations() {
  const conversations = [];
  for (const [phoneNumber, context] of conversationContext.entries()) {
    conversations.push({
      phoneNumber,
      messageCount: context.history.length,
      lastActivity: context.createdAt,
      propertyId: context.propertyId,
      customerInfo: context.customerInfo
    });
  }
  return conversations;
}

/**
 * Get specific conversation
 */
function getConversation(phoneNumber) {
  return conversationContext.get(phoneNumber) || null;
}

export {
  processMessage,
  sendWhatsAppMessage,
  sendPropertyDetails,
  getAllProperties,
  formatPropertiesForAI,
  getAllConversations,
  getConversation
};
